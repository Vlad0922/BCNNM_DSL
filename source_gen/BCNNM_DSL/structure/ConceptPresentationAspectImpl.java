package BCNNM_DSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Cell;
  private ConceptPresentation props_Space;
  private ConceptPresentation props_SpikingCell;
  private ConceptPresentation props_StemCell;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Cell:
        if (props_Cell == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Cell = cpb.create();
        }
        return props_Cell;
      case LanguageConceptSwitch.Space:
        if (props_Space == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Space = cpb.create();
        }
        return props_Space;
      case LanguageConceptSwitch.SpikingCell:
        if (props_SpikingCell == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("spikingcell");
          props_SpikingCell = cpb.create();
        }
        return props_SpikingCell;
      case LanguageConceptSwitch.StemCell:
        if (props_StemCell == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("stemcell");
          props_StemCell = cpb.create();
        }
        return props_StemCell;
    }
    return null;
  }
}
