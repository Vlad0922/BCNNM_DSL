package BCNNM_DSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptCell = createDescriptorForCell();
  /*package*/ final ConceptDescriptor myConceptSpace = createDescriptorForSpace();
  /*package*/ final ConceptDescriptor myConceptSpikingCell = createDescriptorForSpikingCell();
  /*package*/ final ConceptDescriptor myConceptStemCell = createDescriptorForStemCell();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCell, myConceptSpace, myConceptSpikingCell, myConceptStemCell);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Cell:
        return myConceptCell;
      case LanguageConceptSwitch.Space:
        return myConceptSpace;
      case LanguageConceptSwitch.SpikingCell:
        return myConceptSpikingCell;
      case LanguageConceptSwitch.StemCell:
        return myConceptStemCell;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForCell() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "Cell", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57ca6a5dL);
    b.class_(false, true, false);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/4049080668884986461");
    b.version(2);
    b.property("x", 0x3831396a57cb195aL).type(PrimitiveTypeId.INTEGER).origin("4049080668885031258").done();
    b.property("y", 0x3831396a57cb195cL).type(PrimitiveTypeId.INTEGER).origin("4049080668885031260").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpace() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "Space", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57cb195fL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/4049080668885031263");
    b.version(2);
    b.aggregate("cells", 0x3831396a57cb1964L).target(0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57ca6a5dL).optional(true).ordered(true).multiple(true).origin("4049080668885031268").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpikingCell() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "SpikingCell", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57cb1957L);
    b.class_(false, false, false);
    b.super_("BCNNM_DSL.structure.Cell", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57ca6a5dL);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/4049080668885031255");
    b.version(2);
    b.property("spikingFrequency", 0x3831396a57cb1958L).type(PrimitiveTypeId.INTEGER).origin("4049080668885031256").done();
    b.alias("spikingcell");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStemCell() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "StemCell", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57cb18ebL);
    b.class_(false, false, false);
    b.super_("BCNNM_DSL.structure.Cell", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57ca6a5dL);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/4049080668885031147");
    b.version(2);
    b.property("divisionFrequency", 0x3831396a57cb1955L).type(PrimitiveTypeId.INTEGER).origin("4049080668885031253").done();
    b.alias("stemcell");
    return b.create();
  }
}
